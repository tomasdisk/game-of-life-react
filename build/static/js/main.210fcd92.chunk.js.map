{"version":3,"sources":["sketches/sketch.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["grid","COLS","Math","floor","document","documentElement","clientWidth","ROWS","clientHeight","sketch","p","oldGrid","cols","rows","color","rand","running","setup","createCanvas","colorMode","HSB","makeGrid","random","initializer","a","x","y","sumNeighbors","myCustomRedrawAccordingToNewPropsHandler","props","draw","background","i","j","fill","stroke","rect","resolution","nextGen","mouseReleased","mouseX","mouseY","console","log","h","drawer","App","useState","setColor","setRandom","setRunning","className","onClick","oldRandom","index","length","clear","old","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.210fcd92.chunk.js","sourcesContent":["let resolution = 20;\nconst COLS = Math.floor(document.documentElement.clientWidth / resolution) - 1;\nconst ROWS = Math.floor(document.documentElement.clientHeight / resolution) - 5;\nlet grid: number[];\n\nconst eraser = (grid: number[], x: number, y: number, h = 1) => {\n  for (let i = x; i < x + h; i++) {\n    for (let j = y; j < y + h; j++) {\n      grid[i * COLS + j] = 0;\n    }\n  }\n};\n\nconst drawer = (grid: number[], x: number, y: number, h = 1) => {\n  for (let i = x; i < x + h; i++) {\n    for (let j = y; j < y + h; j++) {\n      grid[i * COLS + j] = 1;\n    }\n  }\n};\n\nconst makeGilder = (\n  grid: number[],\n  x: number,\n  y: number,\n  dir = 0,\n  force = false\n) => {\n  if (force) {\n    eraser(grid, x, y, 3);\n  }\n  let xDir = 1;\n  let yDir = 1;\n  let xx = x;\n  let yy = y;\n  if (dir === 2) {\n    xDir = -1;\n    xx = x + 2;\n  }\n  if (dir === 0) {\n    yDir = -1;\n    yy = y + 2;\n  }\n  if (dir === 3) {\n    xDir = -1;\n    yDir = -1;\n    xx = x + 2;\n    yy = y + 2;\n  }\n  grid[(xx + 1) * COLS * xDir + yy] = 1;\n  grid[(xx + 2) * COLS * xDir + yy + 1 * yDir] = 1;\n  grid[xx * COLS + yy + 2 * yDir] = 1;\n  grid[(xx + 1) * COLS * xDir + yy + 2 * yDir] = 1;\n  grid[(xx + 2) * COLS * xDir + yy + 2 * yDir] = 1;\n};\n\nconst makeBlock = (grid: number[][], x: number, y: number) => {\n  grid[x][y] = 1;\n  grid[x + 1][y] = 1;\n  grid[x + 1][y + 1] = 1;\n  grid[x][y + 1] = 1;\n};\n\nexport const clear = () => {\n  for (let index = 0; index < grid.length; index++) {\n    grid[index] = 0;\n  }\n};\n\nconst sketch = (p: any) => {\n  let oldGrid: number[];\n  let cols = COLS;\n  let rows = ROWS;\n  let color = 80;\n  let rand = false;\n  let running = true;\n\n  p.setup = () => {\n    p.createCanvas(resolution * cols, resolution * rows);\n    p.colorMode(p.HSB);\n    // cols = p.width / resolution\n    // rows = p.height / resolution\n    grid = makeGrid(cols, rows, () => p.floor(p.random(2)));\n    oldGrid = makeGrid(cols, rows);\n    // p.frameRate(5)\n\n    // drawer(grid, 10,10,16)\n    // makeGilder(grid, 30,30,3)\n  };\n\n  const makeGrid = (\n    cols: number,\n    rows: number,\n    initializer?: (cols: number, rows: number, x: number, y: number) => number\n  ) => {\n    const a: number[] = [];\n    for (let x = 0; x < cols; x++) {\n      for (let y = 0; y < rows; y++) {\n        a[x * cols + y] = initializer ? initializer(cols, rows, x, y) : 0;\n      }\n    }\n    return a;\n  };\n\n  const sumNeighbors = (grid: number[], x: number, y: number) => {\n    const sum =\n      (grid[(x + 1) * cols + y - 1] || 0) +\n      (grid[(x + 1) * COLS + y] || 0) +\n      (grid[(x + 1) * COLS + y + 1] || 0) +\n      (grid[x * COLS + y + 1] || 0) +\n      (grid[(x - 1) * COLS + y + 1] || 0) +\n      (grid[(x - 1) * COLS + y] || 0) +\n      (grid[(x - 1) * COLS + y - 1] || 0) +\n      (grid[x * COLS + y - 1] || 0);\n    return sum;\n  };\n\n  const nextGen = (grid: number[], oldGrid: number[]) => {\n    for (let i = 0; i < cols; i++) {\n      for (let j = 0; j < rows; j++) {\n        if (oldGrid[i * COLS + j] === 3) {\n          grid[i * COLS + j] = 1;\n        } else {\n          if (oldGrid[i * COLS + j] !== 2) {\n            grid[i * COLS + j] = 0;\n          }\n        }\n      }\n    }\n  };\n  p.myCustomRedrawAccordingToNewPropsHandler = (props: any) => {\n    color = props.color;\n    rand = props.random;\n    running = props.running;\n  };\n\n  p.draw = () => {\n    p.background(0);\n    for (let i = 0; i < cols; i++) {\n      let x = i * resolution;\n      for (let j = 0; j < rows; j++) {\n        let y = j * resolution;\n\n        if (grid[i * COLS + j]) {\n          p.fill(rand ? p.floor(p.random(256)) : color, 200, 150);\n        } else {\n          p.fill(0, 0, 50);\n        }\n        p.stroke(0);\n        p.rect(x, y, resolution - 1, resolution - 1);\n        oldGrid[i * COLS + j] = sumNeighbors(grid, i, j);\n      }\n    }\n    if (running) {\n      nextGen(grid, oldGrid);\n    }\n  };\n\n  p.mouseReleased = () => {\n    const x = p.floor(p.mouseX / resolution);\n    const y = p.floor(p.mouseY / resolution);\n    console.log(x, y);\n    if (x >= 0 && y >= 0 && x < COLS && y < ROWS) {\n      drawer(grid, x, y, 1);\n      // eraser(grid, x + 3, y + 3, 5);\n      // makeGilder(grid, x, y, 1, true);\n    }\n  };\n};\n\nexport default sketch;\n","import React, { useState } from \"react\";\nimport P5Wrapper from \"react-p5-wrapper\";\nimport sketch, { clear } from \"./sketches/sketch\";\n\nfunction App() {\n  const [color, setColor] = useState(80);\n  const [random, setRandom] = useState(false);\n  const [running, setRunning] = useState(true);\n\n  return (\n    <div className=\"bg-indigo-300 h-screen\">\n      <nav className=\"flex items-center justify-between bg-indigo-600 p-3\">\n        <div className=\"inline-flex\">\n          <button\n            // className=\"m-1 p-3 rounded-md bg-yellow-500\"\n            className=\"bg-indigo-600 border-indigo-800 hover:border-yellow-500 text-indigo-200 hover:text-indigo-100 p-2 border-2 rounded-l\"\n            onClick={() => {\n              setRandom((oldRandom) => !oldRandom);\n            }}\n          >\n            Random Color\n          </button>\n          <button\n            // className=\"m-1 p-3 rounded-md bg-yellow-500\"\n            className=\"bg-indigo-600 border-indigo-800 hover:border-yellow-500 text-indigo-200 hover:text-indigo-100 p-2 border-2 border-l-0 \"\n            onClick={() => {\n              setRandom(false);\n              setColor(Math.floor(Math.random() * 255));\n            }}\n          >\n            Change Color\n          </button>\n          <button\n            // className=\"m-1 p-3 rounded-md bg-yellow-500\"\n            className=\"bg-indigo-600 border-indigo-800 hover:border-yellow-500 text-indigo-200 hover:text-indigo-100 p-2 border-2 border-l-0\"\n            onClick={() => clear()}\n          >\n            Clear\n          </button>\n          <button\n            // className=\"m-1 p-3 rounded-md bg-yellow-500\"\n            className=\"bg-indigo-600 border-indigo-800 hover:border-yellow-500 text-indigo-200 hover:text-indigo-100 p-2 border-2 border-l-0 rounded-r\"\n            onClick={() => setRunning((old) => !old)}\n          >\n            {running ? \"Stop\" : \"Play\"}\n          </button>\n        </div>\n      </nav>\n      <section className=\"w-full flex justify-center align-middle\">\n        <P5Wrapper\n          sketch={sketch}\n          color={color}\n          random={random}\n          running={running}\n        />\n      </section>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './output.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}